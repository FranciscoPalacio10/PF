[["procesamiento-de-datos.html", "6 PROCESAMIENTO DE DATOS 6.1 Comprensión de los datos 6.2 Limpieza de datos 6.3 Transformación de datos", " 6 PROCESAMIENTO DE DATOS 6.1 Comprensión de los datos 6.1.1 Obtención de datos Para iniciar con el desarrollo del modelo, se obtienen desde la base de datos la información necesaria con la que se trabajará a lo largo del proceso. Como primer paso analizamos la base de datos en busca de las tablas que nos proporcionará la información necesaria. Del resultado de este analistas obtuvimos que la información necesaria se obtendrá de la base de datos DatosPersonales y las tablas: ActiveLoanHeader: la cual tiene los datos que hacen referencia a los prestamos otorgados. Auth0User: la cual tiene los datos referentes a los usuarios de los prestamos. BigDataTabla: la cual tiene los datos crediticios relacionados con los usuarios, obtenidos de los buró de cerditos El primer problema es que gran parte de la información a utilizar se encuentra en una sola columna, de la tabla CacheVariablesNosis,con formato JSON. Esta tabla cuenta con más de quince mil columnas. Para resolver esto se diseñaron dos funciones, las cuales permiten obtener los valores almacenados en el JSON y con ellos crear una nueva tabla, llamada BigDataTabla, a si poder relacionarlas con las tablas mencionadas. El segundo problema es como obtener en una sola tabla los datos de las tres tablas mencionadas. Para resolver esto se creo la vista View_BigData, la cual contiene 28946 filas y 112 columnas. Para la conexión a la base de datos desde RStudio se debe utilizar el paquete RODBC y la sentencia que permite obtener la conexión: con &lt;- odbcDriverConnect(&quot;Driver=SQLSERVER;Server=&quot;&quot;;Port=&quot;&quot;;Database=&quot;&quot;;Uid=&quot;&quot;;Pwd=&quot;&quot; &quot;) , una vez obtenida la conexión se procede a obtener la vista generada en la base de datos y la asignamos a una variable llamada DatosPrestamos que es del tipo Data Frame: DfDatosPrestamos &lt;- data.frame(sqlQuery(con,&quot;SELECT * FROM [dbo].[View_BigData]&quot;)) 6.1.2 Analisis de datos Para empezar con el análisis de datos, que nos permitirá obtener un conocimiento más profundo utilizaremos las siguientes funciones. Obtenemos solo información de donde el Id de los prestamos exista. DfDatosPrestamos &lt;- DfDatosPrestamos %&gt;% filter(!is.na(ActiveLoanHeaderId)) Limpiamos los espacios de los nombres de las columnas. DfDatosPrestamos &lt;- data.frame(DfDatosPrestamos %&gt;% select(-UserName,-CUIL) %&gt;% clean_names()) La dimensión de nuestro Data Frame (tabla con los datos) filtrado. ## [1] 721 110 Una primera impresión de nuestros datos. figura 6.1: Funcion Head La primera impresión al ver nuestros datos es que hay muchas columnas con valores null(NA), otros que su tipo no corresponde al valor que contienen en el caso de valores que actualmente son caracter y se deben transformar a bool, date, int respectivamente. El tipo de dato de cada columna de la tabla: figura 6.2: Funcion Str 6)Informacion estadistica de las variables numericas: figura 6.3: Funcion Summary Como conclusión de esta primera fase de analisis de datos podemos decir que tenemos: Total de columnas : 110 Total de filas : 721 Total de variables numericas : 60. Total de variables caracter: 48. Columnas donde debemos ajustar NA: figura 6.4: Columnas NA Total: 94 columnas. 6.2 Limpieza de datos 6.2.1 Eliminar datos repetidos y Nulos Obtener porcentaje de NA de cada columna: figura 6.5: Eliminar Datos Vacios Se observa que un total de columnas tienen valores NA, donde las siguientes tiene un valor mayor al 70%: ## PorcentajeNA ## numero_consultados_bancos12meses 0.46 ## numero_consultados_bancos_financieras12meses 0.46 ## numero_consultados_financieras1mes 0.46 ## numero_consultados_bancos1mes 0.46 ## numero_consultados_bancos_financieras_otros1mes 0.46 ## numero_consultados12meses 0.46 ## score_sco 1.00 ## score_cda_valor 1.00 ## antiguedad_laboral_2 1.00 ## antiguedad_autonomo_meses 1.00 ## estado_de_los_aportes_patronales_como_empleador 1.00 ## peor_situacion_con_10_ult_6_meses 1.00 ## cantidad_tarjetas_de_credito 1.00 ## compromiso_mensual_nse 0.86 ## deuda_total_nse 0.87 ## tiene_referencias_ult_6_meses 1.00 ## score_3_meses 1.00 ## nivel_socioeconomico_percentil 1.00 ## nivel_socioeconomico_cada_nse 1.00 ## numero_consultados_financieras12meses 0.46 ## bureau_de_credito_del_bcra 1.00 ## cheques_rechazados_del_bcra 1.00 ## edad 1.00 ## capacidad_endeudamiento_p_personal 1.00 Eliminar dichos valores de nuestro conjunto de datos. cols_borrar &lt;- which(colMeans(is.na(DfDatosPrestamos)) &gt;= 0.40) DfDatosPrestamos &lt;- DfDatosPrestamos[,-cols_borrar] Eliminar columnas repetidas y con todos valores ceros. DfDatosPrestamosUno &lt;- DfDatosPrestamos %&gt;% select(-es_empleado_2,-es_autonomo_2,-es_moroso_2,-ultima_regla,-ultimo_score3m,-ultimo_score6m,-ultimo_score9m,-suma_montos_mayores_a2,antiguedad_autonomo,-fecha_alta_autonomo,-fecha_alta_monotributo,-cant_bcos_sit_tres,-beneficios_detalle,-compromiso_mensual_2,-fecha_creacion,-razon_social_nombre,-nivel_socioeconomico,-nivel_socioeconomico_cda,-empleador,-hash,-created_date,-empleador_rz) Lo cual nos deja un total de 721 filas y 65 columnas. Con respecto a las 721 filas y 86 columnas de los datos iniciales. A partir de este punto seguiremos trabajando con los datos del DfDatosPrestamosUno. Eliminar columnas por temas de negocios. DfDatosPrestamosUno &lt;- DfDatosPrestamosUno %&gt;% select(-fallecido,-score_centena,-mobbex,-loan_id,-active_loan_header_id,-pasa_reglas,-es_autonomo,-es_menor_de_edad,-es_integrante_sociedad,-fecha_alta) 6.3 Transformación de datos 6.3.1 Redefinir Tipo De Datos De caracter a bool (int) for(posicion in 1:ncol(DfDatosPrestamosUno)) { valor &lt;- DfDatosPrestamosUno[,posicion] class&lt;-class(valor) isNa&lt;-is.na(valor) name&lt;-names(DfDatosPrestamosUno)[posicion] if(class(valor) == &quot;character&quot; &amp;&amp; !is.na(valor) &amp;&amp; (valor == &quot;false&quot; || valor == &quot;true&quot;)) { valores &lt;- rbind(valor,(names(DfDatosPrestamosUno)[posicion])) DfDatosPrestamosUno[,posicion]&lt;- as.integer(as.logical(DfDatosPrestamosUno[,posicion])) } } for(posicion in 1:ncol(DfDatosPrestamosUno)) { valor &lt;- DfDatosPrestamosUno[,posicion] class&lt;-class(valor) isNa&lt;-is.na(valor) name&lt;-names(DfDatosPrestamosUno)[posicion] if(class(valor) == &quot;character&quot; &amp;&amp; !is.na(valor) &amp;&amp; (valor == &quot;Si&quot; || valor == &quot;No&quot;)) { valores &lt;- rbind(valor,(names(DfDatosPrestamosUno)[posicion])) DfDatosPrestamosUno[,posicion]&lt;- ifelse(DfDatosPrestamosUno[,posicion]==&quot;Si&quot;,1,0) } } De Caracter a Date DfDatosPrestamosUno$fechanacimiento = as.Date(DfDatosPrestamosUno$fechanacimiento) Reemplazar fecha de nacimiento por edad ModaFechaNacimiento&lt;-CalcularModa(DfDatosPrestamosUno$fechanacimiento) DfDatosPrestamosUno$fechanacimiento[is.na(DfDatosPrestamosUno$fechanacimiento)]&lt;-ModaFechaNacimiento Edades&lt;- floor(age_calc(DfDatosPrestamosUno$fechanacimiento, units = &quot;years&quot;)) DfDatosPrestamosUno &lt;- mutate(DfDatosPrestamosUno,Edad=Edades) *De entero o caracter a factor DfDatosPrestamosUno$situacion &lt;- as.factor(DfDatosPrestamosUno$situacion) DfDatosPrestamosUno$nse &lt;- as.factor(DfDatosPrestamosUno$nse ) DfDatosPrestamosUno$codigo_postal &lt;- as.factor(DfDatosPrestamosUno$codigo_postal) DfDatosPrestamosUno$es_jubilado &lt;- as.factor(DfDatosPrestamosUno$es_jubilado) DfDatosPrestamosUno$es_empleado &lt;- as.factor(DfDatosPrestamosUno$es_empleado) DfDatosPrestamosUno$es_pnc &lt;- as.factor(DfDatosPrestamosUno$es_pnc) DfDatosPrestamosUno$es_inscripto_monotributo &lt;- as.factor(DfDatosPrestamosUno$es_inscripto_monotributo) DfDatosPrestamosUno$es_moroso &lt;- as.factor(DfDatosPrestamosUno$es_moroso) DfDatosPrestamosUno$es_empleado_domestico&lt;- as.factor(DfDatosPrestamosUno$es_empleado_domestico) DfDatosPrestamosUno$es_empleador &lt;- as.factor(DfDatosPrestamosUno$es_empleador) *De caracter a numerico DfDatosPrestamosUno$score_vig &lt;- as.numeric(DfDatosPrestamosUno$score_vig) ## Warning: NAs introducidos por coerción DfDatosPrestamosUno$score_12_meses &lt;- as.numeric(DfDatosPrestamosUno$score_12_meses) ## Warning: NAs introducidos por coerción 6.3.2 Remplazar valores NA o Nulos (Imputación) gg_miss_var(DfDatosPrestamosUno) figura 6.6: Graficos Valores Ausentes Como podemos observar hay un total de 45 columnas que tienen valores nulos los cuales procederemos a tratar seleccionado el mejor metedo que se adapte para esto. Creamos un nuevo conjuto de datos a imputar a los cuales le sacamos la situacion y nse que son variables a predecir. Metodos de imputación. Para ello elegiremos cuatro variables y comparemos los metodos para determinar cual es el mas adecuado. el cual tiene un % de valores faltantes. cantidad_bancos_ult_24_meses el cual tiene un 20.3883495 % de valores faltantes. peor_situacion_con_10 el cual tiene un 14.4244105 % de valores faltantes. es_pnc el cual tiene un 0.6934813 % de valores faltantes. Mediana/Moda En este primer intento por imputar los valor NA ultizamos las tecnicas de Mediana para los valores numericos y la moda para los restantes. A.1) Remplazamos los valores cero donde no es posible tener este valor. A.2) Vemos como quedo la distribución de valores nulos A.3) Exportar data frame figura 6.7: Comparacion primera variable ## Min. 1st Qu. Median Mean 3rd Qu. Max. NA&#39;s ## 1.000 2.000 3.000 3.807 5.000 15.000 147 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1.000 2.000 3.000 3.642 5.000 15.000 figura 6.8: Comparacion segunda variable ## Min. 1st Qu. Median Mean 3rd Qu. Max. NA&#39;s ## 0.000 1.000 1.000 1.128 1.000 5.000 104 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.00 1.00 1.00 1.11 1.00 5.00 figura 6.9: Comparacion tercera variable ## Min. 1st Qu. Median Mean 3rd Qu. Max. NA&#39;s ## 1.0 1.0 64.5 128.9 219.0 763.0 3 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1.0 1.0 64.5 128.6 219.0 763.0 Media K vecinos más cercanos "]]
